#user  nobody;
#user  nginx;
#user startalk;
worker_processes  1;

error_log logs/error.log debug;
pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    lua_package_path '/usr/local/openresty/nginx/lua_app/?.lua;;';

    include       mime.types;
    default_type  text/html;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;
    access_log on;

    # the size depends on the number of servers in upstream {}:
    lua_shared_dict healthcheck 1m;
    lua_socket_log_errors off;

    sendfile        on;
    keepalive_timeout  65;
    resolver 127.0.0.11 8.8.8.8;

    include conf.d/upstreams/*.conf;

    server {
        listen       8080;
        server_name  startalk-or;
        server_tokens off;
        more_clear_headers 'Server';
        more_clear_headers 'X-Powered-By';
        client_max_body_size 10m;
    
        set $template_root /usr/local/openresty/nginx/lua_app;
    
        location /status {
            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx Worker PID: ", ngx.worker.pid())
                ngx.print(hc.status_page())
            }
        }
    
        include conf.d/subconf/*.conf;
    
        error_page   500 502 503 504  /50x.html;
            location = /50x.html {
            root   /usr/local/openresty/nginx/html;
        }
    }

    server {
        listen       8079;
        server_name  startalk-or;
        server_tokens off;
        more_clear_headers 'Server';
        more_clear_headers 'X-Powered-By';
        client_max_body_size 10m;
    
        set $template_root /usr/local/openresty/nginx/lua_app;
    
        location /update_version {
            more_set_headers "content-type: application/json;charset=UTF-8";
            content_by_lua '
                local ver = ngx.var.arg_version

                local config = require("checks.qim.qtalkredis")
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(500)


                local  ok, err = red:connect(config.redis.host, config.redis.port)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:auth(config.redis.passwd)
                if not ok then
                    ngx.say("failed to auth: ", err)
                    return
                end

                ok, err = red:select(15)
                if not ok then
                    ngx.say("failed to select: ", err)
                    return
                end


                ok, err = red:set("navversion", ver)
                if not ok then
                    ngx.say("failed to set: ", err)
                    return
                end

                ngx.say("success!")
                return
            ';
        }
        error_page   500 502 503 504  /50x.html;
            location = /50x.html {
            root   /usr/local/openresty/nginx/html;
        }
    }
    
}
